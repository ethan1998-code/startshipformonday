const { App } = require('@slack/bolt');
require('dotenv').config({ path: '.env.local' });
require('dotenv').config();

console.log('üöÄ Test des variables d\'environnement:');
console.log('SLACK_BOT_TOKEN:', process.env.SLACK_BOT_TOKEN ? '‚úì D√©fini' : '‚úó Manquant');
console.log('SLACK_APP_TOKEN:', process.env.SLACK_APP_TOKEN ? '‚úì D√©fini' : '‚úó Manquant');
console.log('SLACK_SIGNING_SECRET:', process.env.SLACK_SIGNING_SECRET ? '‚úì D√©fini' : '‚úó Manquant');
console.log('JIRA_PROJECT_KEY:', process.env.JIRA_PROJECT_KEY || 'Non d√©fini');

if (!process.env.SLACK_BOT_TOKEN || !process.env.SLACK_APP_TOKEN || !process.env.SLACK_SIGNING_SECRET) {
  console.error('‚ùå Variables d\'environnement manquantes !');
  process.exit(1);
}

console.log('‚úÖ Toutes les variables sont d√©finies !');

const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.SLACK_APP_TOKEN,
  port: process.env.PORT || 3000,
});

// Handler am√©lior√© pour /ticket avec interface moderne
app.command('/ticket', async ({ command, ack, respond }) => {
  await ack();
  
  console.log('üìù Commande /ticket re√ßue:', command.text);
  
  const summary = command.text.trim();
  if (!summary) {
    await respond({
      response_type: 'ephemeral',
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '‚ùå *Erreur de syntaxe*\n\nVeuillez fournir un r√©sum√© pour votre ticket.'
          }
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '*Usage:* `/ticket Votre r√©sum√© ici`\n*Exemple:* `/ticket Corriger le bug de connexion`'
          }
        }
      ]
    });
    return;
  }

  // Afficher un message de confirmation avec design moderne
  await respond({
    response_type: 'ephemeral',
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: 'üîÑ *Cr√©ation de votre ticket en cours...*'
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*Titre:*\n${summary}`
          },
          {
            type: 'mrkdwn',
            text: `*Projet:*\n${process.env.JIRA_PROJECT_KEY || 'AL'}`
          }
        ]
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: '‚è±Ô∏è Veuillez patienter pendant la cr√©ation...'
          }
        ]
      }
    ]
  });

  try {
    // Cr√©er un vrai ticket Jira
    const axios = require('axios');
    
    if (!process.env.JIRA_API_TOKEN || !process.env.JIRA_EMAIL) {
      throw new Error('Token API Jira ou email manquant');
    }
    
    const auth = Buffer.from(`${process.env.JIRA_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64');
    
    
    const jiraData = {
      fields: {
        project: {
          key: process.env.JIRA_PROJECT_KEY || 'AL'
        },
        summary: summary,
        description: {
          type: 'doc',
          version: 1,
          content: [
            {
              type: 'paragraph',
              content: [
                {
                  text: `üìã Ticket cr√©√© depuis Slack`,
                  type: 'text',
                  marks: [{ type: 'strong' }]
                }
              ]
            },
            {
              type: 'paragraph',
              content: [
                {
                  text: `üë§ Cr√©√© par: `,
                  type: 'text'
                },
                {
                  text: `<@${command.user_id}>`,
                  type: 'text',
                  marks: [{ type: 'code' }]
                }
              ]
            },
            {
              type: 'paragraph',
              content: [
                {
                  text: `üìç Canal: `,
                  type: 'text'
                },
                {
                  text: `<#${command.channel_id}>`,
                  type: 'text',
                  marks: [{ type: 'code' }]
                }
              ]
            },
            {
              type: 'rule'
            },
            {
              type: 'paragraph',
              content: [
                {
                  text: `üìù Description: ${summary}`,
                  type: 'text'
                }
              ]
            }
          ]
        },
        issuetype: {
          name: process.env.JIRA_ISSUE_TYPE || 'Task'
        }
      }
    };
    
    console.log('üîÑ Cr√©ation du ticket Jira...', jiraData);
    
    const response = await axios.post(
      `${process.env.JIRA_BASE_URL}/rest/api/3/issue`,
      jiraData,
      {
        headers: {
          'Authorization': `Basic ${auth}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }
    );
    
    const ticketKey = response.data.key;
    const ticketUrl = `${process.env.JIRA_BASE_URL}/browse/${ticketKey}`;
    
    console.log('‚úÖ Ticket Jira cr√©√©:', ticketKey);
    
    // R√©pondre avec l'interface moderne am√©lior√©e
    await respond({
      response_type: 'in_channel',
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `üé´ *Ticket cr√©√© avec succ√®s !*`
          },
          accessory: {
            type: 'button',
            text: {
              type: 'plain_text',
              text: 'Ouvrir dans Jira',
              emoji: true
            },
            value: ticketKey,
            url: ticketUrl,
            action_id: 'open_jira_ticket'
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*ID du ticket:*\n\`${ticketKey}\``
            },
            {
              type: 'mrkdwn',
              text: `*Statut:*\nüÜï Nouveau`
            },
            {
              type: 'mrkdwn',
              text: `*Projet:*\n${process.env.JIRA_PROJECT_KEY || 'AL'}`
            },
            {
              type: 'mrkdwn',
              text: `*Cr√©√© par:*\n<@${command.user_id}>`
            }
          ]
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*Titre:* ${summary}`
          }
        },
        {
          type: 'divider'
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: `‚úÖ Ticket ajout√© au backlog ‚Ä¢ ${new Date().toLocaleString('fr-FR')}`
            }
          ]
        }
      ]
    });
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation ticket:', error);
    await respond({
      response_type: 'ephemeral',
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '‚ùå *Erreur lors de la cr√©ation du ticket*'
          }
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `\`\`\`\n${error.message}\`\`\``
          }
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: 'üí° V√©rifiez vos permissions Jira ou contactez l\'administrateur'
            }
          ]
        }
      ]
    });
  }
});

// Handler am√©lior√© pour @starship mentions avec analyse IA professionnelle
app.event('app_mention', async ({ event, say, client }) => {
  console.log('ü§ñ Mention @starship re√ßue:', event.text);
  
  try {
    // V√©rifier si c'est une demande d'aide simple
    if (event.text.toLowerCase().includes('help')) {
      await say({
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: `üëã *Bonjour <@${event.user}> !*\n\nJe suis *Starship*, votre assistant IA pour la gestion de projet.`
            }
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*üõ†Ô∏è Mes capacit√©s:*\n‚Ä¢ `/ticket [titre]` - Cr√©er un ticket Jira rapide\n‚Ä¢ `@starship` dans un thread - Analyser la conversation et cr√©er un ticket intelligent avec DoD professionnelle\n‚Ä¢ `@starship help` - Afficher cette aide'
            }
          },
          {
            type: 'divider'
          },
          {
            type: 'context',
            elements: [
              {
                type: 'mrkdwn',
                text: 'üí° *Astuce:* Mentionnez-moi dans un thread de discussion pour que j\'analyse l\'historique complet et cr√©e un ticket d√©taill√© comme un Product Manager !'
              }
            ]
          }
        ],
        thread_ts: event.ts
      });
      return;
    }

    // Si OpenAI n'est pas configur√©, utiliser mode basique
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your_openai_api_key_here') {
      await say({
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '‚ö†Ô∏è *Analyse IA indisponible*\n\nLa cl√© OpenAI n\'est pas configur√©e.'
            }
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*Alternative:* Utilisez `/ticket [r√©sum√©]` pour cr√©er un ticket simple.'
            }
          }
        ],
        thread_ts: event.ts
      });
      return;
    }

    // Message initial d'analyse avec interface moderne
    await say({
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: 'üß† *Analyse IA en cours...*'
          }
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: 'üîç R√©cup√©ration de l\'historique du thread\n‚ö° Analyse avec OpenAI GPT-4\nüìù G√©n√©ration de la Definition of Done'
          }
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: '‚è±Ô∏è Cela peut prendre quelques secondes...'
            }
          ]
        }
      ],
      thread_ts: event.ts
    });

    // R√©cup√©rer l'historique COMPLET du thread avec plus de d√©tails
    console.log('üìú R√©cup√©ration de l\'historique COMPLET du thread...');
    
    let fullConversationContext = '';
    let threadHistory = null;
    let messageCount = 0;
    
    try {
      // R√©cup√©rer plus de messages et inclure les metadata
      threadHistory = await client.conversations.replies({
        channel: event.channel,
        ts: event.thread_ts || event.ts,
        limit: 100, // Augment√© pour capturer plus de contexte
        inclusive: true
      });
      
      if (threadHistory.messages && threadHistory.messages.length > 0) {
        messageCount = threadHistory.messages.length;
        
        // Construire un contexte riche avec timestamps et utilisateurs
        fullConversationContext = threadHistory.messages
          .filter(msg => msg.text && !msg.bot_id) // Exclure les bots mais garder les utilisateurs
          .map((msg, index) => {
            const timestamp = new Date(parseFloat(msg.ts) * 1000).toLocaleString('fr-FR');
            const user = msg.user ? `<@${msg.user}>` : 'Utilisateur';
            return `[${index + 1}] ${timestamp} - ${user}:\n${msg.text}\n`;
          })
          .join('\n---\n');
          
        console.log(`üìä ${messageCount} messages r√©cup√©r√©s pour l'analyse`);
      } else {
        fullConversationContext = `Message initial: ${event.text}`;
        messageCount = 1;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur r√©cup√©ration historique:', error.message);
      fullConversationContext = `Message actuel: ${event.text}`;
      messageCount = 1;
    }

    console.log('üß† Contexte pr√©par√© pour analyse IA:', fullConversationContext.substring(0, 300) + '...');

    // Analyser avec OpenAI en mode Product Manager professionnel
    const aiAnalysis = await analyzeWithOpenAIProductManager(fullConversationContext, messageCount);
    
    // Cr√©er le ticket Jira avec l'analyse IA professionnelle
    const ticketResult = await createIntelligentJiraTicket(aiAnalysis, event.user, event.channel);
    
    // R√©ponse avec interface moderne et d√©taill√©e
    await say({
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '‚úÖ *Ticket intelligent cr√©√© par l\'IA !*'
          },
          accessory: {
            type: 'button',
            text: {
              type: 'plain_text',
              text: 'Ouvrir dans Jira',
              emoji: true
            },
            url: ticketResult.url,
            action_id: 'open_ai_ticket'
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*Ticket ID:*\n\`${ticketResult.key}\``
            },
            {
              type: 'mrkdwn',
              text: `*Messages analys√©s:*\n${messageCount} messages`
            }
          ]
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*ÔøΩ Titre g√©n√©r√©:*\n${ticketResult.title}`
          }
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: 'ü§ñ Analys√© par OpenAI GPT-4 ‚Ä¢ Definition of Done g√©n√©r√©e automatiquement'
            }
          ]
        }
      ],
      thread_ts: event.ts
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse IA:', error);
    await say({
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '‚ùå *Erreur lors de l\'analyse IA*'
          }
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `\`\`\`\n${error.message}\`\`\``
          }
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: 'üí° R√©essayez ou utilisez `/ticket` pour un ticket simple'
            }
          ]
        }
      ],
      thread_ts: event.ts
    });
  }
});

// Fonction d'analyse OpenAI sp√©cialis√©e Product Manager
async function analyzeWithOpenAIProductManager(conversationText, messageCount) {
  console.log('üß† Analyse Product Manager avec OpenAI...', conversationText.substring(0, 100));
  
  if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your_openai_api_key_here') {
    // Simulation sophistiqu√©e pour les tests
    return {
      title: "Feature analys√©e automatiquement",
      description: `**üéØ CONTEXTE**
Cette t√¢che a √©t√© g√©n√©r√©e automatiquement √† partir d'une conversation Slack de ${messageCount} messages.

**üìã DESCRIPTION**
Analyse et impl√©mentation bas√©e sur les discussions de l'√©quipe.

**‚úÖ DEFINITION OF DONE**
- [ ] Analyser les requirements identifi√©s dans la conversation
- [ ] Impl√©menter la solution propos√©e
- [ ] Effectuer les tests unitaires et d'int√©gration
- [ ] Documenter les changements apport√©s
- [ ] Valider avec les stakeholders
- [ ] D√©ployer en environnement de test
- [ ] Obtenir l'approbation finale

**üîó CONTEXTE ORIGINAL**
${conversationText.substring(0, 500)}...

**üìä CRIT√àRES D'ACCEPTATION**
- La solution doit r√©pondre aux besoins exprim√©s
- Le code doit respecter les standards de qualit√©
- La documentation doit √™tre mise √† jour`
    };
  }

  try {
    const OpenAI = require('openai');
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    const expertPrompt = `Tu es un Product Manager senior exp√©riment√©. Analyse cette conversation Slack d'√©quipe et g√©n√®re un ticket Jira professionnel.

CONVERSATION SLACK (${messageCount} messages):
===
${conversationText}
===

INSTRUCTIONS:
1. G√©n√®re un titre concis et actionnable (max 60 caract√®res)
2. Cr√©e une description structur√©e comme un PM professionnel avec:
   - üéØ Contexte business
   - üìã Description d√©taill√©e
   - ‚úÖ Definition of Done compl√®te et pr√©cise
   - üìä Crit√®res d'acceptation sp√©cifiques
   - üîó R√©f√©rences ou d√©pendances si mentionn√©es

R√àGLES:
- DoD doit avoir 5-8 points actionables avec checkboxes
- Utilise les emojis pour la lisibilit√©
- Sois sp√©cifique et mesurable
- Inclus les aspects techniques ET business
- Format Markdown professionnel

R√©ponds UNIQUEMENT en JSON valide avec cette structure:
{
  "title": "Titre concis et actionnable",
  "description": "Description markdown structur√©e comme d√©crit ci-dessus"
}`;

    console.log('ü§ñ Envoi √† OpenAI GPT-4 (mode Product Manager)...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: expertPrompt }],
      max_tokens: 1500,
      temperature: 0.3 // Plus d√©terministe pour la coh√©rence professionnelle
    });

    const content = response.choices[0].message.content.trim();
    console.log('‚úÖ R√©ponse OpenAI re√ßue:', content.substring(0, 200) + '...');
    
    // Nettoyer la r√©ponse
    const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '');
    
    return JSON.parse(cleanContent);
  } catch (error) {
    console.error('‚ùå Erreur OpenAI:', error.message);
    // Fallback professionnel en cas d'erreur
    return {
      title: "T√¢che analys√©e par IA",
      description: `**üéØ CONTEXTE**
Ticket g√©n√©r√© automatiquement √† partir d'une conversation Slack de ${messageCount} messages.

**üìã DESCRIPTION**
${conversationText.substring(0, 400)}...

**‚úÖ DEFINITION OF DONE**
- [ ] Analyser les requirements mentionn√©s dans la conversation
- [ ] Concevoir la solution technique appropri√©e
- [ ] Impl√©menter les fonctionnalit√©s demand√©es
- [ ] Effectuer les tests unitaires et d'int√©gration
- [ ] R√©diger la documentation technique
- [ ] Effectuer une revue de code
- [ ] Tester en environnement de staging
- [ ] D√©ployer et valider en production

**üìä CRIT√àRES D'ACCEPTATION**
- La solution r√©pond aux besoins exprim√©s dans la conversation
- Le code respecte les standards de qualit√© de l'√©quipe
- La documentation est compl√®te et √† jour
- Les tests passent avec succ√®s

**‚ö†Ô∏è NOTE**
Analyse g√©n√©r√©e automatiquement - v√©rifier les d√©tails avec l'√©quipe.`
    };
  }
}

// Fonction pour cr√©er un ticket Jira intelligent avec formatage professionnel
async function createIntelligentJiraTicket(aiAnalysis, userId, channelId) {
  const axios = require('axios');
  
  const auth = Buffer.from(`${process.env.JIRA_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64');
  
  // Convertir la description Markdown en format Atlassian Document Format (ADF)
  const descriptionText = aiAnalysis.description || `Ticket cr√©√© automatiquement depuis Slack`;
  
  const jiraData = {
    fields: {
      project: { key: process.env.JIRA_PROJECT_KEY || 'AL' },
      summary: aiAnalysis.title,
      description: {
        type: 'doc',
        version: 1,
        content: [
          {
            type: 'paragraph',
            content: [
              { 
                text: "ü§ñ TICKET G√âN√âR√â PAR IA", 
                type: 'text',
                marks: [{ type: 'strong' }]
              }
            ]
          },
          {
            type: 'rule'
          },
          {
            type: 'paragraph',
            content: [
              { 
                text: descriptionText, 
                type: 'text' 
              }
            ]
          },
          {
            type: 'rule'
          },
          {
            type: 'paragraph',
            content: [
              { 
                text: "üìç M√âTADONN√âES", 
                type: 'text',
                marks: [{ type: 'strong' }]
              }
            ]
          },
          {
            type: 'paragraph',
            content: [
              { 
                text: `üë§ Demandeur: ${userId}\nüì± Canal Slack: ${channelId}\nüïí Cr√©√©: ${new Date().toLocaleString('fr-FR')}\nü§ñ Analys√© par: OpenAI GPT-4`, 
                type: 'text' 
              }
            ]
          }
        ]
      },
      issuetype: { name: process.env.JIRA_ISSUE_TYPE || 'Task' },
      labels: ['ai-generated', 'slack-integration', 'starship']
    }
  };

  console.log('üìã Donn√©es Jira √† envoyer:', JSON.stringify(jiraData, null, 2));

  try {
    const response = await axios.post(
      `${process.env.JIRA_BASE_URL}/rest/api/3/issue`,
      jiraData,
      {
        headers: {
          'Authorization': `Basic ${auth}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ Ticket Jira cr√©√© avec succ√®s:', response.data.key);

    return {
      key: response.data.key,
      title: aiAnalysis.title,
      url: `${process.env.JIRA_BASE_URL}/browse/${response.data.key}`
    };
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e Jira:', error.response?.data || error.message);
    throw new Error(`Erreur Jira: ${error.response?.data?.errors ? JSON.stringify(error.response.data.errors) : error.message}`);
  }
}

(async () => {
  await app.start();
  console.log('‚ö°Ô∏è Starship fonctionne en mode Socket !');
  console.log('Testez dans Slack:');
  console.log('- /ticket Mon premier test');
  console.log('- @starship hello');
})();
